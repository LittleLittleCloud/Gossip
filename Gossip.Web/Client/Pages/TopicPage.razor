@page "/topic"
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Topic = Gossip.Core.Topic;
@using Gossip.Core

<PageTitle>Topic</PageTitle>
<EditForm Model="@topicID" OnValidSubmit="@CreateTopic">
    <div class="col-12 row">
        <label class="col-2 font-weight-bold">topic ID: </label>
        <InputText class="form-control col-3" @bind-Value="topicID.ID" placeholder="topic ID" />
        <button type="submit">Create Topic</button>
    </div>
</EditForm>

@if(topics == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="topic-table">
        <MudExpansionPanels MultiExpansion="true">
            @foreach(var topic in topics)
            {
                <MudExpansionPanel Text="@topic.ID.ToString()">
                    @foreach(var comment in topic.Comments)
                    {
                        <CommentCard Comment="@comment" />
                    }
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </div>
}

@code {
    private TopicID topicID = new TopicID();
    private List<Topic> topics { get; set; }
    private Topic fakeTopic;

    private async Task GetAllTopics()
    {
        this.topics = (await Http.GetFromJsonAsync<IEnumerable<Topic>>($"Topic/all")).ToList();
        this.topics.Add(fakeTopic);
    }

    protected async override Task OnInitializedAsync()
    {
        var user = new User()
            {
                Id = "fake",
                NickName = "fake",
            };
        var comment = new Comment()
            {
                CreatedBy = user,
                Content = "hello comment",
                Replys = new Reply[]
                {
                new Reply
                {
                    Content = "fuck you",
                    CreatedBy = user,
                },
                },
            };
        fakeTopic = new Topic
            {
                ID = 111,
                Comments = new[] { comment },
            };
        await GetAllTopics();
        await base.OnInitializedAsync();
    }

    private async Task CreateTopic()
    {
        await Http.PostAsync($"Topic/{topicID.ID}", null);
    }

    private class TopicID
    {
        public string ID { get; set; }
    }
}
